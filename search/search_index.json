{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang di Halaman Tugas Komputasi Numerik Nama : Julius Agung S. NIM : 180411100024 Kelas : Komputasi Numerik 3C Prodi : Teknik Informatika Angkatan: 2018 Alamat: Perum Sumbertaman Indah Blok RE II No. 19 Kota Probolinggo","title":"home"},{"location":"#selamat-datang-di-halaman-tugas-komputasi-numerik","text":"Nama : Julius Agung S. NIM : 180411100024 Kelas : Komputasi Numerik 3C Prodi : Teknik Informatika Angkatan: 2018 Alamat: Perum Sumbertaman Indah Blok RE II No. 19 Kota Probolinggo","title":"Selamat Datang di Halaman Tugas Komputasi Numerik"},{"location":"MATERI%201%20%28Deret%20MCLAURIN%29/","text":"MATERI 1 (Deret MCLAURIN) Suatu fungsi f(x) yang memiliki turunan , , , dan seterusnya yang kontinyu dalam interval dengan maka untuk disekitar yaitu , dapat diekspansi kedalam Deret Taylor Definisi. dengan adalah Deret Taylor dan adalah sisa. dimana Dalam kasus khusus jika , maka disebut Deret MacLaurin atau sering disebut Deret Taylor baku. Dan didefinisikan sebagai berikut Definisi. Deret Taylor atau Deret MacLaurin ini sangat bermanfaat dalam metode numerik untuk menghitung atau menghampiri nilai-nilai fungsi yang susah dihitung secara manual seperti nilai , , , atau . Tentu kita tidak akan bisa menghitung nilai-nilai fungsi tersebut tanpa menggunakan bantuan kalkulator atau tabel. Dalam tulisan ini saya akan mencoba untuk mendekati fungsi-fungsi tersebut menggunakan Deret MacLaurin. f'(x) = ex f'(0) = 1 f\u201d(x) = ex f\u201d(0) = 1 f\u201d'(x) = ex f\u201d'(0) = 1 . . . f(n)(x) = ex f(n)(0) = 1 f(0) = 0 f'(x) = cos x f'(0) = 1 f\u201d(x) = -sin x f\u201d(0) = 0 f\u201d'(x) = -cos x f\u201d'(0) = -1 f(iv)(x) = sin x f(iv)(0) = 0 f(v)(x) = cos x f(v)(0) = 1 f(vi)(x) = -sin x f(vi)(0) = 0 f(vii)(x) = -cos x f(vii)(0) = -1 . . . f(x) = 0 + (1) + (0) + (-1) + (0) + (1) + (0) + (-1) + \u2026 f(0) = 1 f'(x) = -sin x f'(0) = 0 f\u201d(x) = -cos x f\u201d(0) = -1 f\u201d'(x) = sin x f\u201d'(0) = 0 f(iv)(x) = cos x f(iv)(0) = 1 f(v)(x) = -sin x f(v)(0) = 0 f(vi)(x) = -cos x f(vi)(0) = -1 f(vii)(x) = sin x f(vii)(0) = 0 . . . f(0) = ln(1) = 0 f'(x) = (x + 1)-1 f'(0) = 1 f\u201d(x) = -1(x + 1)-2 f'(0) = -1 = -1! f\u201d'(x) = 2(x + 1)-3 f'(0) = 2 = 2! f(iv)(x) = -6(x + 1)-4 f'(0) = -6 = -3! f(v) (x) = 24(x + 1)-5 f'(0) = 24 = 4! . . . untuk fungsi dengan basis 10, fungsi hampirannnya sama dengan fungsi . soal dan jawaban dalam bentuk code buatlah program yang dapat mengekspansi bilangan e^2x dengan nilai x=4 hingga nilai menjadi kurang dari 0,001 bisa dibuat dengan listing program sebagai berikut. import math x = 4 check = 1 a = 0 b = 1 while check > 0.001 : f_x = 0 f_y = 0 for i in range(a): f_x += (2**i)*x**i/math.factorial(i) for j in range(b): f_y += (2**j)*x**j/math.factorial(j) check = f_y - f_x a+=1 b+=1 print('iterasi ke-',a,'= ',check) output: iterasi ke- 1 = 1.0 iterasi ke- 2 = 8.0 iterasi ke- 3 = 32.0 iterasi ke- 4 = 85.33333333333333 iterasi ke- 5 = 170.66666666666669 iterasi ke- 6 = 273.0666666666666 iterasi ke- 7 = 364.08888888888896 iterasi ke- 8 = 416.1015873015872 iterasi ke- 9 = 416.1015873015872 iterasi ke- 10 = 369.8680776014112 iterasi ke- 11 = 295.89446208112895 iterasi ke- 12 = 215.195972422639 iterasi ke- 13 = 143.46398161509296 iterasi ke- 14 = 88.28552714774924 iterasi ke- 15 = 50.448872655856576 iterasi ke- 16 = 26.90606541645684 iterasi ke- 17 = 13.45303270822842 iterasi ke- 18 = 6.330838921519444 iterasi ke- 19 = 2.8137061873417224 iterasi ke- 20 = 1.184718394670199 iterasi ke- 21 = 0.47388735786807956 iterasi ke- 22 = 0.18052851728316455 iterasi ke- 23 = 0.06564673355751438 iterasi ke- 24 = 0.022833646454728296 iterasi ke- 25 = 0.0076112154847578495 iterasi ke- 26 = 0.0024355889549951826 iterasi ke- 27 = 0.0007494119863622473","title":"Materi 1"},{"location":"MATERI%201%20%28Deret%20MCLAURIN%29/#materi-1-deret-mclaurin","text":"Suatu fungsi f(x) yang memiliki turunan , , , dan seterusnya yang kontinyu dalam interval dengan maka untuk disekitar yaitu , dapat diekspansi kedalam Deret Taylor Definisi. dengan adalah Deret Taylor dan adalah sisa. dimana Dalam kasus khusus jika , maka disebut Deret MacLaurin atau sering disebut Deret Taylor baku. Dan didefinisikan sebagai berikut Definisi. Deret Taylor atau Deret MacLaurin ini sangat bermanfaat dalam metode numerik untuk menghitung atau menghampiri nilai-nilai fungsi yang susah dihitung secara manual seperti nilai , , , atau . Tentu kita tidak akan bisa menghitung nilai-nilai fungsi tersebut tanpa menggunakan bantuan kalkulator atau tabel. Dalam tulisan ini saya akan mencoba untuk mendekati fungsi-fungsi tersebut menggunakan Deret MacLaurin. f'(x) = ex f'(0) = 1 f\u201d(x) = ex f\u201d(0) = 1 f\u201d'(x) = ex f\u201d'(0) = 1 . . . f(n)(x) = ex f(n)(0) = 1 f(0) = 0 f'(x) = cos x f'(0) = 1 f\u201d(x) = -sin x f\u201d(0) = 0 f\u201d'(x) = -cos x f\u201d'(0) = -1 f(iv)(x) = sin x f(iv)(0) = 0 f(v)(x) = cos x f(v)(0) = 1 f(vi)(x) = -sin x f(vi)(0) = 0 f(vii)(x) = -cos x f(vii)(0) = -1 . . . f(x) = 0 + (1) + (0) + (-1) + (0) + (1) + (0) + (-1) + \u2026 f(0) = 1 f'(x) = -sin x f'(0) = 0 f\u201d(x) = -cos x f\u201d(0) = -1 f\u201d'(x) = sin x f\u201d'(0) = 0 f(iv)(x) = cos x f(iv)(0) = 1 f(v)(x) = -sin x f(v)(0) = 0 f(vi)(x) = -cos x f(vi)(0) = -1 f(vii)(x) = sin x f(vii)(0) = 0 . . . f(0) = ln(1) = 0 f'(x) = (x + 1)-1 f'(0) = 1 f\u201d(x) = -1(x + 1)-2 f'(0) = -1 = -1! f\u201d'(x) = 2(x + 1)-3 f'(0) = 2 = 2! f(iv)(x) = -6(x + 1)-4 f'(0) = -6 = -3! f(v) (x) = 24(x + 1)-5 f'(0) = 24 = 4! . . . untuk fungsi dengan basis 10, fungsi hampirannnya sama dengan fungsi .","title":"MATERI 1 (Deret MCLAURIN)"},{"location":"MATERI%201%20%28Deret%20MCLAURIN%29/#soal-dan-jawaban-dalam-bentuk-code","text":"buatlah program yang dapat mengekspansi bilangan e^2x dengan nilai x=4 hingga nilai menjadi kurang dari 0,001 bisa dibuat dengan listing program sebagai berikut. import math x = 4 check = 1 a = 0 b = 1 while check > 0.001 : f_x = 0 f_y = 0 for i in range(a): f_x += (2**i)*x**i/math.factorial(i) for j in range(b): f_y += (2**j)*x**j/math.factorial(j) check = f_y - f_x a+=1 b+=1 print('iterasi ke-',a,'= ',check) output: iterasi ke- 1 = 1.0 iterasi ke- 2 = 8.0 iterasi ke- 3 = 32.0 iterasi ke- 4 = 85.33333333333333 iterasi ke- 5 = 170.66666666666669 iterasi ke- 6 = 273.0666666666666 iterasi ke- 7 = 364.08888888888896 iterasi ke- 8 = 416.1015873015872 iterasi ke- 9 = 416.1015873015872 iterasi ke- 10 = 369.8680776014112 iterasi ke- 11 = 295.89446208112895 iterasi ke- 12 = 215.195972422639 iterasi ke- 13 = 143.46398161509296 iterasi ke- 14 = 88.28552714774924 iterasi ke- 15 = 50.448872655856576 iterasi ke- 16 = 26.90606541645684 iterasi ke- 17 = 13.45303270822842 iterasi ke- 18 = 6.330838921519444 iterasi ke- 19 = 2.8137061873417224 iterasi ke- 20 = 1.184718394670199 iterasi ke- 21 = 0.47388735786807956 iterasi ke- 22 = 0.18052851728316455 iterasi ke- 23 = 0.06564673355751438 iterasi ke- 24 = 0.022833646454728296 iterasi ke- 25 = 0.0076112154847578495 iterasi ke- 26 = 0.0024355889549951826 iterasi ke- 27 = 0.0007494119863622473","title":"soal dan jawaban dalam bentuk code"},{"location":"MATERI%202%20%28Newton%20Raphson%29/","text":"Program Newton Raphson pada Fungsi Non Linear \u00b6 Pengertian Newton Raphson \u00b6 adalah metode pencarian akar suatu fungsi f(x) dengan pendekatan satu titik, dimana fungsi $f(x)$ mempunyai turunan. Metode ini dianggap lebih mudah dari *Metode Bagi Dua* (Bisection Method) karena metode ini menggunakan pendekatan satu titik sebagai titik awal. Semakin dekat titik awal yang kita pilih dengan akar sebenarnya, maka semakin cepat konvergen ke akarnya. Prosedur Metode Newton : menentukan x_0 sebagai titik awal, kemudian menarik garis lurus (misal garis imath ) yang menyinggung titik f(x_0) . Hal ini berakibat garis imath memotong sumbu x di titik x_1 Setelah itu diulangi langkah sebelumnya tapi sekarang x_1 dianggap sebagai titik awalnya. Dari mengulang langkah-langkah sebelumnya akan mendapatkan x_2 , x_3 , ... , x_n dengan x_n yang diperoleh adalah bilangan riil yang merupakan akar atau mendekati akar yang sebenarnya. Perhatikan gambar diatas untuk menurunkan rumus Metode Newton-Raphson Menyusun Algoritma dan Pemrograman Newton Rhapson \u00b6 dari rumus yang kita dapat diatas kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 sebagai berikut : Listing Program \u00b6 dari algoritma diatas , kita dapat menyusun sebuah program seperti berikut. import math e = 2.71828 def fungsi(x): x = float((e**x) - (4*x)) return x def fungsiturunan(x): x = float((e**x) - (4)) return x x = float(input('Masukkan nilai awal = ')) error = float(input('Masukkan nilai error = ')) perulangan = int(input('Masukkan maksimal pengulangan = ')) iterasi = 0 selisih = error+1 while iterasi <= perulangan and selisih>error : iterasi += 1 f_2 = x - (fungsi(x)/fungsiturunan(x)) selisih = math.fabs(f_2 - x) x = f_2 print(\"Iterasi ke = \",iterasi,\", x = \",f_2, \", f(\",f_2,\") = \",fungsi(f_2),\", selisih = \",error) if iterasi <= perulangan: print(\"Perulangan Mencapai Batas Maksimal dengan hasil = \", f_2) else : print(\"Toleransi tidak terpenuhi\") Dengan Output sebagai berikut : Masukkan nilai awal = 0 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 20 Iterasi ke = 1 , x = 0.3333333333333333 , f( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 Iterasi ke = 2 , x = 0.35724635301940616 , f( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35724635301940616 Iterasi ke = 3 , x = 0.35740281572145605 , f( 0.35740281572145605 ) = 1.734656973617632e-08 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35740281572145605 Iterasi ke = 4 , x = 0.3574028224700733 , f( 0.3574028224700733 ) = -6.439293542825908e-15 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3574028224700733 Penjelasan : Importh Library math karena kita menggunakan contoh fungsi f(x) = e^x - 4X maka kita membuat sebuah fungsi yang sesuai , dan juga fungsi turunannya yaitu f'(x) = e^x - 4 Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition lalu deklarasikan iterasi = 0 untuk perulangan yang ke 0 nantinya dan akan ditambah setiap kali perulangan deklarasikan selisih untuk x_b - x_0 untuk perbandingan lakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon hitung x_b dengan rumus yang sudah kita dapatkan sebelumnya lalu lakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi namun perulangan sudah mencapai batas jika pengecekan selisih > error bernilai bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke n","title":"Materi 2"},{"location":"MATERI%202%20%28Newton%20Raphson%29/#program-newton-raphson-pada-fungsi-non-linear","text":"","title":"Program Newton Raphson pada Fungsi Non Linear\u00b6"},{"location":"MATERI%202%20%28Newton%20Raphson%29/#pengertian-newton-raphson","text":"adalah metode pencarian akar suatu fungsi f(x) dengan pendekatan satu titik, dimana fungsi $f(x)$ mempunyai turunan. Metode ini dianggap lebih mudah dari *Metode Bagi Dua* (Bisection Method) karena metode ini menggunakan pendekatan satu titik sebagai titik awal. Semakin dekat titik awal yang kita pilih dengan akar sebenarnya, maka semakin cepat konvergen ke akarnya. Prosedur Metode Newton : menentukan x_0 sebagai titik awal, kemudian menarik garis lurus (misal garis imath ) yang menyinggung titik f(x_0) . Hal ini berakibat garis imath memotong sumbu x di titik x_1 Setelah itu diulangi langkah sebelumnya tapi sekarang x_1 dianggap sebagai titik awalnya. Dari mengulang langkah-langkah sebelumnya akan mendapatkan x_2 , x_3 , ... , x_n dengan x_n yang diperoleh adalah bilangan riil yang merupakan akar atau mendekati akar yang sebenarnya. Perhatikan gambar diatas untuk menurunkan rumus Metode Newton-Raphson","title":"Pengertian Newton Raphson\u00b6"},{"location":"MATERI%202%20%28Newton%20Raphson%29/#menyusun-algoritma-dan-pemrograman-newton-rhapson","text":"dari rumus yang kita dapat diatas kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 sebagai berikut :","title":"Menyusun Algoritma dan Pemrograman Newton Rhapson\u00b6"},{"location":"MATERI%202%20%28Newton%20Raphson%29/#listing-program","text":"dari algoritma diatas , kita dapat menyusun sebuah program seperti berikut. import math e = 2.71828 def fungsi(x): x = float((e**x) - (4*x)) return x def fungsiturunan(x): x = float((e**x) - (4)) return x x = float(input('Masukkan nilai awal = ')) error = float(input('Masukkan nilai error = ')) perulangan = int(input('Masukkan maksimal pengulangan = ')) iterasi = 0 selisih = error+1 while iterasi <= perulangan and selisih>error : iterasi += 1 f_2 = x - (fungsi(x)/fungsiturunan(x)) selisih = math.fabs(f_2 - x) x = f_2 print(\"Iterasi ke = \",iterasi,\", x = \",f_2, \", f(\",f_2,\") = \",fungsi(f_2),\", selisih = \",error) if iterasi <= perulangan: print(\"Perulangan Mencapai Batas Maksimal dengan hasil = \", f_2) else : print(\"Toleransi tidak terpenuhi\") Dengan Output sebagai berikut : Masukkan nilai awal = 0 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 20 Iterasi ke = 1 , x = 0.3333333333333333 , f( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 Iterasi ke = 2 , x = 0.35724635301940616 , f( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35724635301940616 Iterasi ke = 3 , x = 0.35740281572145605 , f( 0.35740281572145605 ) = 1.734656973617632e-08 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35740281572145605 Iterasi ke = 4 , x = 0.3574028224700733 , f( 0.3574028224700733 ) = -6.439293542825908e-15 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3574028224700733 Penjelasan : Importh Library math karena kita menggunakan contoh fungsi f(x) = e^x - 4X maka kita membuat sebuah fungsi yang sesuai , dan juga fungsi turunannya yaitu f'(x) = e^x - 4 Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition lalu deklarasikan iterasi = 0 untuk perulangan yang ke 0 nantinya dan akan ditambah setiap kali perulangan deklarasikan selisih untuk x_b - x_0 untuk perbandingan lakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon hitung x_b dengan rumus yang sudah kita dapatkan sebelumnya lalu lakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi namun perulangan sudah mencapai batas jika pengecekan selisih > error bernilai bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke n","title":"Listing Program\u00b6"}]}